# Compile Kiwi Browser
name: automatic build of apk
#
# Controls when the action will run. Triggers the workflow on push or pull request events
on:
  push:
    paths-ignore:
      - '*.md'
    branches: [ master ]
  pull_request:
    paths-ignore:
      - '*.md'
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Starting NFS
        run: 
          echo "/ -maproot=nobody 192.168.64.1" | sudo tee /etc/exports
          echo "/ -maproot=nobody 192.168.64.2" | sudo tee -a /etc/exports
          sudo nfsd checkexports
          sudo nfsd enable
          sudo nfsd start
          nfsd status

      - name: Installing osxfuse
        run: brew cask install osxfuse

      - name: Installing docker
        run: brew install docker docker-compose docker-machine xhyve docker-machine-driver-xhyve sshfs
        
      - name: Setting up docker
        run: |
          sudo chown root:wheel $(brew --prefix)/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
          sudo chmod u+s $(brew --prefix)/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve  
          mkdir -p ~/.docker/machine/cache
          curl -Lo ~/.docker/machine/cache/boot2docker.iso https://github.com/boot2docker/boot2docker/releases/download/v19.03.5/boot2docker.iso

      - name: Booting machine
        run: for i in $(seq 1 10); do docker-machine create --driver xhyve default && s=0 && break || sudo kill -9 `ps aux | grep xhyve | grep -v grep | awk '{print $2}'` && sudo rm -rf /Users/runner/.docker/machine/machines/default && s=$? && sleep 15; done; (exit $s)    # Retry 10 times before abort
          
      - name: Exporting docker environment variables
        run: |
          DOCKER_TLS_VERIFY="$(docker-machine env default | grep DOCKER_TLS_VERIFY | sed -e 's/.*="//g' -e 's/"$//g')"
          DOCKER_HOST="$(docker-machine env default | grep DOCKER_HOST | sed -e 's/.*="//g' -e 's/"$//g')"
          DOCKER_CERT_PATH="$(docker-machine env default | grep DOCKER_CERT_PATH | sed -e 's/.*="//g' -e 's/"$//g')"
          DOCKER_MACHINE_NAME="$(docker-machine env default | grep DOCKER_MACHINE_NAME | sed -e 's/.*="//g' -e 's/"$//g')"
          DOCKER_IP="$(docker-machine ip default)";
          echo ::set-env name=DOCKER_TLS_VERIFY::${DOCKER_TLS_VERIFY}
          echo ::set-env name=DOCKER_HOST::${DOCKER_HOST}
          echo ::set-env name=DOCKER_CERT_PATH::${DOCKER_CERT_PATH}
          echo ::set-env name=DOCKER_MACHINE_NAME::${DOCKER_MACHINE_NAME}
          echo ::set-env name=DOCKER_IP::${DOCKER_IP}

      - name: Starting Ubuntu machine
        run: docker run --name ubuntu -t -d ubuntu:eoan
        
      - name: Checking available disk-space
        run: docker exec ubuntu df -h
        
      - name: Creating NFS folder on guest
        run: docker exec ubuntu sudo mkdir -p /host

      - name: Mounting NFS storage
        run: docker exec --user root ubuntu mount -t nfs 192.168.64.1:/ /host -o nolock
        
      - name: Checking available disk-space
        run: docker exec ubuntu df -h
        
      - name: Checking NFS folder on guest
        run: docker exec --user root ubuntu ls -la /host/

        
      - name: Checking NFS folder on guest
        run: docker exec --user root ubuntu ls -la /host/Users/
        
      - name: Creating storage directory
        run: mkdir -p $GITHUB_WORKSPACE/storage

      - name: Checking-out source-code
        uses: actions/checkout@v2
        with:
          path: storage/src

      - name: Checking storage directory on host
        run: ls -la $GITHUB_WORKSPACE/storage/src

      - name: Checking storage directory on guest (/storage)
        run: docker exec ubuntu ls -la /storage

      - name: Checking storage directory on guest (/storage/src)
        run: docker exec ubuntu ls -la /storage/src

      - name: Checking-out CIPD dependencies in $GITHUB_WORKSPACE/.cipd
        uses: actions/checkout@v2
        with:
          repository: kiwibrowser/dependencies
          path: .cipd

      - name: Checking storage directory
        run: ls -la .cipd

      - name: Checking available disk-space
        run: docker exec ubuntu df -h
        
      - name: Copying .gclient and .gclient_entries
        run: |
          cp $GITHUB_WORKSPACE/.cipd/.gclient $GITHUB_WORKSPACE/storage/
          cp $GITHUB_WORKSPACE/.cipd/.gclient_entries $GITHUB_WORKSPACE/storage/
          ln -s $GITHUB_WORKSPACE/.cipd $GITHUB_WORKSPACE/storage/

      - name: Creating output folder
        run: mkdir -p out/android_arm
      
      - name: Generating one-time APK signature key
        run: keytool -genkey -v -keystore $GITHUB_WORKSPACE/storage/src/keystore.jks -alias dev -keyalg RSA -keysize 2048 -validity 10000 -storepass public_password -keypass public_password -dname "cn=Kiwi Browser (unverified), ou=Actions, o=Kiwi Browser, c=GitHub"

      - name: Copying args.gn to target folder
        run: cp $GITHUB_WORKSPACE/storage/src/.build/android_arm/args.gn out/android_arm/

      - name: Downloading depot_tools
        run: git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        
      - name: Adding depot_tools to path
        run: echo "::add-path::$GITHUB_WORKSPACE/depot_tools"

      - name: Running gclient runhooks
        working-directory: /Users/runner/storage/src
        run: gclient runhooks

      - name: Removing files
        run: |
          rm -rf /Users/runner/storage/src/third_party/llvm-build/Release+Asserts/bin/llvm-ar
#          mkdir -p /Users/runner/storage/src/third_party/llvm-build/Release+Asserts

      - name: Listing files
        run: ls -la /Users/runner/storage/src/third_party/llvm-build/

      - name: Listing files
        run: ls -la /Users/runner/storage/src/third_party/llvm-build/Release+Asserts/bin
              
      - name: Generating build files
        working-directory: /Users/runner/storage/src
        run: gn gen $GITHUB_WORKSPACE/out/android_arm
      
      - name: Gathering pre-compiled objects from cache
        uses: actions/cache@v1
        with:
          path: out/android_arm
          key: ${{ runner.os }}-android_arm-obj-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-android_arm-obj-

      - name: Compiling source-code
        working-directory: /Users/runner/storage/src
        run: ninja -C $GITHUB_WORKSPACE/out/android_arm chrome_public_apk

      - name: Deleting args.gn to not have it in cache
        run: rm -rvf out/android_arm/args.gn

      - name: Uploading APK
        uses: actions/upload-artifact@v1
        with:
          name: apks
          path: out/android_arm/apks/
