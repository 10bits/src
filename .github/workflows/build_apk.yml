# Compile Kiwi Browser
name: Build APK

# Controls when the action will run. Triggers the workflow on push or pull request events
on:
  push:
    paths-ignore:
      - '*.md'
    branches: [ master ]
  pull_request:
    paths-ignore:
      - '*.md'
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job

    # Remarks:
    # /dev/sdb1 is a faster device (SSD)
    # /dev/sda1 has more available space than /dev/sdb1 (14 GB only on /dev/sdb1)
    # -> we want to take advantage of the available disk space on /dev/sda1
    
    # For these reasons:
    # We store the dependencies and output objects on /dev/sda1 
    # We store the main repository on /dev/sdb1
    steps:
      - name: Reclaiming disk space on /dev/sda1 by disabling swap partition
        run: |
          sudo swapoff -av
          sudo rm -f /swapfile
          
      - name: Reclaiming disk space on /dev/sda1 by removing .NET framework
        run: sudo rm -rf /usr/share/dotnet

      - name: Preparing secondary disk
        run: |
          sudo mkdir -p /mnt/storage
          sudo chown -R runner:docker /mnt/storage
          ln -s /mnt/storage .

      - name: Checking-out source-code
        uses: actions/checkout@v2
        with:
          path: storage/src

      - name: Checking-out CIPD dependencies in $GITHUB_WORKSPACE/.cipd
        uses: actions/checkout@v2
        with:
          repository: kiwibrowser/dependencies
          path: .cipd 
          
      - name: Copying .gclient and .gclient_entries
        run: |
          cp .cipd/.gclient /mnt/storage/
          cp .cipd/.gclient_entries /mnt/storage/
          ln -s $GITHUB_WORKSPACE/.cipd /mnt/storage/

      - name: Installing Python and OpenJDK
        run: sudo apt-get install python openjdk-8-jdk-headless libncurses5

      - name: Setting-up Java 8 as default Java provider
        run: sudo update-java-alternatives --set java-1.8.0-openjdk-amd64

      - name: Installing system dependencies
        working-directory: /mnt/storage/src
        run: |
          sudo bash install-build-deps.sh --no-chromeos-fonts
          build/linux/sysroot_scripts/install-sysroot.py --arch=i386
          build/linux/sysroot_scripts/install-sysroot.py --arch=amd64
          
      - name: Creating output folder
        run: mkdir -p out/android_arm
      
      - name: Generating one-time APK signature key
        run: keytool -genkey -v -keystore keystore.jks -alias dev -keyalg RSA -keysize 2048 -validity 10000 -storepass public_password -keypass public_password -dname "cn=Kiwi Browser (unverified), ou=Actions, o=Kiwi Browser, c=GitHub"

      - name: Copying args.gn to target folder
        run: cp /mnt/storage/src/.build/android_arm/args.gn out/android_arm/

      - name: Downloading depot_tools
        run: git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        
      - name: Adding depot_tools to path
        run: echo "::add-path::$GITHUB_WORKSPACE/depot_tools"
      
      - name: Running gclient runhooks
        working-directory: /mnt/storage/src
        run: gclient runhooks
      
      - name: Generating build files
        working-directory: /mnt/storage/src
        run: gn gen $GITHUB_WORKSPACE/out/android_arm
      
      - name: Creating obj directory
        working-directory: /mnt/storage/src
        run: mkdir -p $GITHUB_WORKSPACE/out/android_arm/obj

      - name: Gathering pre-compiled objects from cache
        uses: actions/cache@v1
        with:
          path: out/android_arm/obj
          key: ${{ runner.os }}-android_arm-obj

      - name: Compiling source-code
        working-directory: /mnt/storage/src
        run: ninja -C $GITHUB_WORKSPACE/out/android_arm chrome_public_apk

      - name: Uploading APK
        uses: actions/upload-artifact@v1
        with:
          name: apks
          path: out/android_arm/apks/

