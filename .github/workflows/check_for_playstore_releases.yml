# Check for new App Store releases and announce on GitHub
# We ask a mirror of the App Store and check for integrity of the APK
name: checking for new appstore releases

# Controls when the action will run. Triggers when manually activated.
on: 
  workflow_dispatch:

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      - uses: actions/setup-java@v1
        with:
          java-version: 13

      - name: Installing rclone
        run: curl https://rclone.org/install.sh | sudo bash -s beta

      - name: Creating rclone config to upload the cache
        run: |
          mkdir -p $HOME/.config/rclone/
          echo '[sync]' > $HOME/.config/rclone/rclone.conf
          echo 'type = s3' >> $HOME/.config/rclone/rclone.conf
          echo 'provider = Wasabi' >> $HOME/.config/rclone/rclone.conf
          echo 'env_auth = true' >> $HOME/.config/rclone/rclone.conf
          echo 'endpoint = s3.wasabisys.com' >> $HOME/.config/rclone/rclone.conf
          echo 'acl = public-read' >> $HOME/.config/rclone/rclone.conf

      - name: Downloading check_for_playstore_releases.sh script
        run: wget https://raw.githubusercontent.com/kiwibrowser/src/master/.github/workflows/check_for_playstore_releases.sh

      - name: Downloading artifacts to storage (Wasabi S3)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.WASABI_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.WASABI_SECRET_KEY }}
        run: |
          rclone copy --fast-list --transfers=16 sync:kiwibrowser-reference/ ./

      - name: Listing local artifacts
        run: |
          ls -la
          exit -1

      - name: Executing check_for_playstore_releases.sh script
        env:
          APPSTORE_HOST: ${{ secrets.APPSTORE_HOST }}
          APPSTORE_LIST_PATH: ${{ secrets.APPSTORE_LIST_PATH }}
          APPSTORE_DOWNLOAD_PATH: ${{ secrets.APPSTORE_DOWNLOAD_PATH }}
          AUTHORIZATION: ${{ secrets.APPSTORE_AUTHORIZATION }}
          PROXY_HOST: ${{ secrets.APPSTORE_PROXY_HOST }}
          PROXY_USER: ${{ secrets.APPSTORE_PROXY_USER }}
        run: bash check_for_playstore_releases.sh

      - name: Creating release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_id }}
          release_name: Play Store ${{ github.run_id }}
          draft: true
          prerelease: false
          body: |
            This release is the same as the development version, except it is signed by Google instead of the developer.

      - name: Uploading release asset (arm-playstore)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Kiwi-arm-playstore.apk
          asset_name: Kiwi-${{ github.run_id }}-arm-playstore.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Uploading release asset (arm64-playstore)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Kiwi-arm64-playstore.apk
          asset_name: Kiwi-${{ github.run_id }}-arm64-playstore.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Uploading release asset (x86-playstore)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Kiwi-x86-playstore.apk
          asset_name: Kiwi-${{ github.run_id }}-x86-playstore.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Uploading release asset (x64-playstore)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Kiwi-x64-playstore.apk
          asset_name: Kiwi-${{ github.run_id }}-x64-playstore.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Uploading artifacts to storage (Wasabi S3)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.WASABI_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.WASABI_SECRET_KEY }}
        run: |
          rclone copy --fast-list --transfers=16 ./Kiwi-arm-playstore.apk sync:kiwibrowser-reference/
          rclone copy --fast-list --transfers=16 ./Kiwi-arm64-playstore.apk sync:kiwibrowser-reference/
          rclone copy --fast-list --transfers=16 ./Kiwi-x86-playstore.apk sync:kiwibrowser-reference/
          rclone copy --fast-list --transfers=16 ./Kiwi-x64-playstore.apk sync:kiwibrowser-reference/
